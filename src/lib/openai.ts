// Fun√ß√£o utilit√°ria para retry/backoff em erros 429
async function withRetry<T>(fn: () => Promise<T>, retries = 3, delayMs = 2000): Promise<T> {
  let lastError;
  for (let i = 0; i < retries; i++) {
    try {
      return await fn();
    } catch (err: any) {
      // OpenAI error: err.status ou err.response?.status
      const status = err?.status || err?.response?.status;
      if (status === 429) {
        await new Promise(res => setTimeout(res, delayMs * (i + 1)));
        lastError = err;
      } else {
        throw err;
      }
    }
  }
  throw lastError;
}
// src/lib/openai.ts

import OpenAI from 'openai'
import type { NarrativeProcessResult, DocumentAnalysis } from '@/types'

export class OpenAIService {
  private openai: OpenAI

  constructor() {
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY
    })
  }

  /**
   * Processa narrativa f√°tica convertendo para linguagem jur√≠dica
   */
  async processNarrative(rawNarrative: string, actionType: string): Promise<NarrativeProcessResult> {
    try {
      console.log('ü§ñ Processando narrativa com OpenAI...')
      
      const prompt = `
Voc√™ √© um assistente jur√≠dico especializado em reda√ß√£o de pe√ßas processuais.

TAREFA: Converter o texto fornecido em uma narrativa f√°tica profissional para uma ${actionType}.

TEXTO FORNECIDO:
"${rawNarrative}"

INSTRU√á√ïES:
1. Organize as informa√ß√µes seguindo a t√©cnica 5W2H (o que, onde, quando, como, por que)
2. Use linguagem jur√≠dica formal mas acess√≠vel
3. Estruture em at√© 5 par√°grafos de 4 linhas cada
4. Identifique as partes como "Autor" e "R√©u" quando apropriado
5. Mantenha apenas informa√ß√µes relevantes ao caso
6. Use presente do indicativo para fatos atuais
7. Use pret√©rito perfeito para fatos passados

EXEMPLO DE ESTRUTURA:
- 1¬∫ par√°grafo: O QUE aconteceu (fato principal)
- 2¬∫ par√°grafo: ONDE e QUANDO aconteceu (contexto temporal e espacial)  
- 3¬∫ par√°grafo: COMO aconteceu (circunst√¢ncias e detalhes)
- 4¬∫ par√°grafo: POR QUE aconteceu (motiva√ß√µes e causas)
- 5¬∫ par√°grafo: CONSEQU√äNCIAS (danos e preju√≠zos)

Responda APENAS com a narrativa processada, sem coment√°rios adicionais.`

      const completion = await withRetry(() =>
        this.openai.chat.completions.create({
          model: "gpt-4o-mini",
          messages: [
            {
              role: "system",
              content: "Voc√™ √© um advogado experiente especializado em reda√ß√£o de pe√ßas processuais. Seja preciso, claro e use linguagem jur√≠dica apropriada."
            },
            {
              role: "user",
              content: prompt
            }
          ],
          max_tokens: 2000,
          temperature: 0.3
        })
      );

      const processedNarrative = completion.choices[0].message?.content?.trim()

      if (!processedNarrative) {
        throw new Error('Resposta vazia da OpenAI')
      }

      // Gerar sugest√µes adicionais
      const suggestions = await this.generateSuggestions(processedNarrative, actionType)

      console.log('‚úÖ Narrativa processada com sucesso')

      return {
        success: true,
        processedNarrative,
        suggestions
      }

    } catch (error) {
      console.error('Erro ao processar narrativa:', error)
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      }
    }
  }

  /**
   * Analisa documento e categoriza automaticamente
   */
  async analyzeDocument(
    ocrText: string, 
    filename: string, 
    mimeType: string
  ): Promise<DocumentAnalysis> {
    try {
      console.log('üß† Analisando documento com IA...')

      const prompt = `
Analise este documento brasileiro e categorize-o conforme as op√ß√µes abaixo.

TEXTO EXTRA√çDO:
"""
${ocrText || 'N√£o foi poss√≠vel extrair texto'}
"""

NOME DO ARQUIVO: ${filename}
TIPO: ${mimeType}

CATEGORIAS DISPON√çVEIS:
1. RG - Registro Geral, Carteira de Identidade (cont√©m: filia√ß√£o, √≥rg√£o expedidor, CPF)
2. CNH - Carteira Nacional de Habilita√ß√£o (cont√©m: categoria, validade, RENACH)
3. CPF - Cadastro de Pessoa F√≠sica (cont√©m: n√∫mero CPF, situa√ß√£o cadastral)
4. Comprovante Resid√™ncia - Contas, comprovantes de endere√ßo
5. Procura√ß√£o - Procura√ß√µes, outorgas, mandatos
6. Contrato - Qualquer tipo de contrato ou acordo
7. Documento M√©dico - Atestados, laudos, receitas
8. Certid√£o - Nascimento, casamento, √≥bito
9. Narrativa - Relatos, descri√ß√£o de fatos
10. Outro - Documentos que n√£o se encaixam acima

INSTRU√á√ïES CR√çTICAS:
- Para RG: Procure "REGISTRO GERAL", "IDENTIDADE", "FILIA√á√ÉO", nome dos pais
- Para CNH: Procure "CNH", "HABILITA√á√ÉO", "CATEGORIA", "VALIDADE" 
- Para CPF: Procure "CPF", formato XXX.XXX.XXX-XX
- Basei sua decis√£o NO CONTE√öDO DO TEXTO, n√£o no nome do arquivo

Responda em JSON:
{
  "category": "nome_da_categoria",
  "confidence": 0.95,
  "detectedInfo": {
    "name": "nome_encontrado",
    "cpf": "cpf_encontrado",
    "rg": "rg_encontrado",
    "organizacaoExpedidora": "orgao_expedidor"
  },
  "suggestedFilename": "nome_inteligente_do_arquivo.pdf"
}`

      const response = await withRetry(() =>
        this.openai.chat.completions.create({
          model: "gpt-4o-mini",
          messages: [
            {
              role: "system",
              content: "Voc√™ √© um especialista em identifica√ß√£o de documentos brasileiros. Analise cuidadosamente o texto extra√≠do e responda APENAS em JSON v√°lido."
            },
            {
              role: "user",
              content: prompt
            }
          ],
          max_tokens: 500,
          temperature: 0.1
        })
      );

      const aiResponse = response.choices[0]?.message?.content?.trim()
      
      if (!aiResponse) {
        throw new Error('Resposta vazia da IA')
      }

      // Parse da resposta JSON
      let analysisData
      try {
        // ‚úÖ CORRE√á√ÉO: Limpar markdown antes do parse
        const cleanResponse = aiResponse
          .replace(/```json\s*/g, '')
          .replace(/```\s*/g, '')
          .trim()

        analysisData = JSON.parse(cleanResponse)
      } catch (parseError) {
        console.warn('Erro no parse JSON, usando fallback:', parseError)
        analysisData = this.createFallbackAnalysis(ocrText, filename)
      }

      // Estruturar resultado final
      const analysis: DocumentAnalysis = {
        documentType: analysisData.category || 'Outro',
        confidence: analysisData.confidence || 0.7,
        detectedInfo: {
          name: analysisData.detectedInfo?.name || this.extractName(ocrText),
          cpf: analysisData.detectedInfo?.cpf || this.extractCPF(ocrText),
          rg: analysisData.detectedInfo?.rg || this.extractRG(ocrText),
          organizacaoExpedidora: analysisData.detectedInfo?.organizacaoExpedidora || this.extractOrgao(ocrText)
        },
        suggestedFilename: analysisData.suggestedFilename || this.generateSmartFilename(analysisData.category, filename),
        ocrUsed: !!ocrText
      }

      console.log('‚úÖ Documento analisado:', {
        categoria: analysis.documentType,
        confian√ßa: Math.round(analysis.confidence * 100) + '%',
        nome: analysis.suggestedFilename
      })

      return analysis

    } catch (error) {
      console.error('Erro na an√°lise do documento:', error)
      
      // Retornar an√°lise b√°sica em caso de erro
      return {
        documentType: 'Outro',
        confidence: 0.5,
        detectedInfo: {
          name: this.extractName(ocrText),
          cpf: this.extractCPF(ocrText)
        },
        suggestedFilename: filename.replace(/\.[^/.]+$/, '.pdf'),
        ocrUsed: !!ocrText
      }
    }
  }

  /**
   * Gera sugest√µes para fortalecer o caso
   */
  private async generateSuggestions(processedNarrative: string, actionType: string): Promise<string[]> {
    try {
      const prompt = `
Baseado na narrativa processada abaixo, liste 3-5 sugest√µes pr√°ticas para fortalecer juridicamente esta ${actionType}:

NARRATIVA: "${processedNarrative}"

SUGEST√ïES (uma por linha, sem numera√ß√£o):
- Foque em documentos que comprovem os fatos
- Seja espec√≠fico e pr√°tico
- Considere jurisprud√™ncia aplic√°vel
- Pense em provas que podem faltar`

      const completion = await withRetry(() =>
        this.openai.chat.completions.create({
          model: "gpt-4o-mini",
          messages: [
            {
              role: "user",
              content: prompt
            }
          ],
          max_tokens: 400,
          temperature: 0.4
        })
      );

      const suggestionsText = completion.choices[0]?.message?.content?.trim()
      
      return suggestionsText 
        ? suggestionsText.split('\n').filter(s => s.trim().length > 10).slice(0, 5)
        : []

    } catch (error) {
      console.warn('Erro ao gerar sugest√µes:', error)
      return []
    }
  }

  // ==================== HELPERS PRIVADOS ====================

  private createFallbackAnalysis(ocrText: string, filename: string) {
    const text = ocrText.toLowerCase()
    let category = 'Outro'
    
    if (text.includes('registro geral') || text.includes('identidade') || text.includes('filia√ß√£o')) {
      category = 'RG'
    } else if (text.includes('cnh') || text.includes('habilita√ß√£o') || text.includes('categoria')) {
      category = 'CNH'
    } else if (text.includes('cpf') || text.match(/\d{3}\.?\d{3}\.?\d{3}-?\d{2}/)) {
      category = 'CPF'
    } else if (text.includes('comprovante') || text.includes('conta') || text.includes('endere√ßo')) {
      category = 'Comprovante Resid√™ncia'
    } else if (text.includes('procura√ß√£o') || text.includes('outorga')) {
      category = 'Procura√ß√£o'
    }
    
    return {
      category,
      confidence: 0.6,
      detectedInfo: {},
      suggestedFilename: this.generateSmartFilename(category, filename)
    }
  }

  private generateSmartFilename(category: string, originalFilename: string): string {
    const timestamp = new Date().toISOString().slice(0, 10)
    const cleanOriginal = originalFilename.replace(/\.[^/.]+$/, '')

    // Mapeamento correto conforme especifica√ß√£o do cliente
    const categoryMap: Record<string, string> = {
      // 01 - Narrativa F√°tica
      'Narrativa': '01 Narrativa F√°tica',
      'Narrativa F√°tica': '01 Narrativa F√°tica',

      // 02 - Documentos Pessoais (agrupados: RG, CNH, CPF)
      'Documentos Pessoais': '02 Documentos Pessoais',
      'RG': '02 RG',
      'CNH': '02 CNH',
      'CPF': '02 CPF',
      'Documento de Identidade': '02 RG',
      'Carteira de Identidade': '02 RG',
      'Carteira Nacional de Habilita√ß√£o': '02 CNH',

      // 03 - Comprovante de Resid√™ncia
      'Comprovante de Resid√™ncia': '03 Comprovante de Resid√™ncia',
      'Comprovante Resid√™ncia': '03 Comprovante de Resid√™ncia',
      'Conta de Luz': '03 Comprovante de Resid√™ncia',
      'Conta de √Ågua': '03 Comprovante de Resid√™ncia',

      // 04 - Procura√ß√£o
      'Procura√ß√£o': '04 Procura√ß√£o',

      // 05 - Declara√ß√£o de Hipossufici√™ncia
      'Declara√ß√£o de Hipossufici√™ncia': '05 Declara√ß√£o de Hipossufici√™ncia',
      'Declara√ß√£o Hipossufici√™ncia': '05 Declara√ß√£o de Hipossufici√™ncia',

      // 06 - Contratos
      'Contrato': '06 Contrato',
      'Contrato de Presta√ß√£o de Servi√ßos': '06 Contrato',
      'Contrato Presta√ß√£o Servi√ßos': '06 Contrato',
      'Contrato de Trabalho': '06 Contrato',
      'Termo de Acordo': '06 Contrato',

      // 07 - Outros Documentos
      'Documento M√©dico': '07 Outros Documentos',
      'Certid√£o': '07 Outros Documentos',
      'Peti√ß√£o': '07 Outros Documentos',
      'Outros Documentos': '07 Outros Documentos',
      'Outro': '07 Outros Documentos'
    }

    const prefix = categoryMap[category] || '07 Outros Documentos'
    return `${prefix}.pdf`
  }

  private extractName(text: string): string | undefined {
    const nameMatch = text.match(/(?:NOME|Nome)[:\s]+([A-Z√Ä-≈∏\s]{10,50})/i)
    return nameMatch?.[1]?.trim()
  }

  private extractCPF(text: string): string | undefined {
    const cpfMatch = text.match(/(?:CPF[:\s]*)?(\d{3}\.?\d{3}\.?\d{3}-?\d{2})/i)
    if (!cpfMatch) return undefined
    
    const cpf = cpfMatch[1].replace(/\D/g, '')
    return cpf.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.$2.$3-$4')
  }

  private extractRG(text: string): string | undefined {
    const rgMatch = text.match(/(?:RG[:\s]*)?(\d{1,2}\.?\d{3}\.?\d{3}-?\d{1})/i)
    return rgMatch?.[1]
  }

  private extractOrgao(text: string): string | undefined {
    const orgaoMatch = text.match(/(?:SSP|DETRAN|PC|IFP)[\/\s-]*([A-Z]{2})/i)
    return orgaoMatch?.[0]?.toUpperCase()
  }

  async validateDocumentRelevance(
    narrative: string,
    documentText: string,
    documentType: string | null,
    actionType: string
  ): Promise<{ relevant: boolean; confidence: number; reasoning: string }> {
    try {
      // ‚úÖ CORRE√á√ÉO INTELIGENTE: Identificar documentos pessoais para an√°lise especial
      const personalDocumentTypes = [
        'RG',
        'CNH',
        'CPF',
        'Documentos Pessoais',
        'Documento de Identidade',
        'Carteira de Identidade',
        'Carteira Nacional de Habilita√ß√£o',
        'Comprovante de Resid√™ncia',
        'Comprovante Resid√™ncia',
        'Declara√ß√£o de Hipossufici√™ncia',
        'Declara√ß√£o Hipossufici√™ncia',
        'Procura√ß√£o',
        'Certid√£o',
        'Certid√£o de Nascimento',
        'Certid√£o de Casamento'
      ]

      // Verificar se √© documento pessoal
      const isPersonalDocument = personalDocumentTypes.some(type =>
        documentType?.toLowerCase().includes(type.toLowerCase())
      )

      // ‚úÖ PROMPT INTELIGENTE: Para documentos pessoais, validar se a pessoa est√° relacionada ao caso
      const prompt = isPersonalDocument ? `
Voc√™ est√° analisando um DOCUMENTO PESSOAL (${documentType}) em um processo jur√≠dico.

NARRATIVA DO CASO (com nomes das partes envolvidas):
${narrative}

TIPO DE A√á√ÉO: ${actionType}

DOCUMENTO A VALIDAR:
Tipo: ${documentType}
Conte√∫do extra√≠do: ${documentText.substring(0, 1500)}...

INSTRU√á√ïES CR√çTICAS:
1. DOCUMENTOS PESSOAIS (RG, CNH, CPF, Comprovantes, Certid√µes, Procura√ß√µes, Declara√ß√µes) s√£o FUNDAMENTAIS para identificar e qualificar as partes no processo
2. Compare o NOME no documento com os nomes mencionados na narrativa (Autor, R√©u, testemunhas, partes relacionadas)
3. Se o documento pertence a uma das partes do processo (Autor, R√©u) ou pessoa mencionada na narrativa ‚Üí RELEVANTE
4. Se o documento pertence a uma pessoa completamente diferente que n√£o tem rela√ß√£o com o caso ‚Üí N√ÉO RELEVANTE
5. Procure por: nomes, CPFs, datas de nascimento, endere√ßos mencionados na narrativa

EXEMPLOS:
- Se a narrativa fala de "Jo√£o Silva" e o RG √© do Jo√£o Silva ‚Üí RELEVANTE (confian√ßa alta)
- Se a narrativa fala de "Maria Santos" e o RG √© do Jos√© Oliveira (n√£o mencionado) ‚Üí N√ÉO RELEVANTE
- Se h√° d√∫vida sobre a identidade mas pode ser parte relacionada ‚Üí RELEVANTE (confian√ßa m√©dia)

Responda APENAS no formato JSON:
{
  "relevant": true/false,
  "confidence": 0.0-1.0,
  "reasoning": "explica√ß√£o detalhada comparando nome do documento com narrativa"
}
` : `
Analise se este documento √© relevante para o caso jur√≠dico baseado na narrativa dos fatos.

NARRATIVA DO CASO:
${narrative}

TIPO DE A√á√ÉO: ${actionType}

DOCUMENTO A VALIDAR:
Tipo: ${documentType || 'N√£o identificado'}
Conte√∫do: ${documentText.substring(0, 1000)}...

INSTRU√á√ïES:
1. Compare o conte√∫do do documento com os fatos narrados
2. Verifique se o documento prova, comprova ou est√° relacionado aos fatos do caso
3. Seja criterioso mas considere que documentos comprobat√≥rios s√£o geralmente relevantes
4. Se houver d√∫vida, prefira marcar como relevante

Responda APENAS no formato JSON:
{
  "relevant": true/false,
  "confidence": 0.0-1.0,
  "reasoning": "explica√ß√£o breve"
}
`

      console.log(`üîç Validando ${isPersonalDocument ? 'DOCUMENTO PESSOAL' : 'documento'}: ${documentType}`)

      const response = await withRetry(() =>
        this.openai.chat.completions.create({
          model: "gpt-4o-mini", // ‚úÖ TROCADO: 85% mais barato
          messages: [
            {
              role: "system",
              content: isPersonalDocument
                ? "Voc√™ √© um assistente jur√≠dico especializado. Para DOCUMENTOS PESSOAIS, sua tarefa cr√≠tica √© verificar se a pessoa do documento √â UMA DAS PARTES DO PROCESSO. Compare nomes, CPFs e informa√ß√µes pessoais com a narrativa. Seja INTELIGENTE e CRITERIOSO."
                : "Voc√™ √© um assistente jur√≠dico especializado em validar relev√¢ncia de documentos para casos jur√≠dicos. Analise cuidadosamente a rela√ß√£o entre o documento e os fatos narrados."
            },
            {
              role: "user",
              content: prompt
            }
          ],
          max_tokens: isPersonalDocument ? 500 : 300,
          temperature: 0.1
        })
      );

      const content = response.choices[0]?.message?.content
      if (!content) {
        throw new Error('Resposta vazia da OpenAI')
      }

      // Remove markdown code blocks se existirem
      const cleanedContent = content
        .replace(/```json\s*/g, '')
        .replace(/```\s*/g, '')
        .trim()

      const result = JSON.parse(cleanedContent)

      console.log(`üìä Resultado da valida√ß√£o (${documentType}):`, {
        relevante: result.relevant,
        confian√ßa: `${(result.confidence * 100).toFixed(0)}%`,
        racioc√≠nio: result.reasoning?.substring(0, 100) + '...'
      })

      return {
        relevant: Boolean(result.relevant),
        confidence: Number(result.confidence) || 0.5,
        reasoning: String(result.reasoning) || 'Sem explica√ß√£o dispon√≠vel'
      }

    } catch (error) {
      console.error('Erro na valida√ß√£o de relev√¢ncia:', error)
      return {
        relevant: true, // Por seguran√ßa, assume que √© relevante se houver erro
        confidence: 0.5,
        reasoning: 'Erro na valida√ß√£o - assumindo relev√¢ncia por seguran√ßa'
      }
    }
  }

  async detectInconsistencies(
    narrative: string,
    documents: { type: string | null; text: string }[],
    actionType: string
  ): Promise<{ inconsistencies: string[]; overallConsistency: number; recommendations: string[] }> {
    try {
      const documentsInfo = documents.map(doc =>
        `- ${doc.type || 'Tipo n√£o identificado'}: ${doc.text?.substring(0, 100) || 'sem texto'}...`
      ).join('\n')

      const prompt = `
Analise a consist√™ncia entre a narrativa dos fatos e os documentos anexados para esta a√ß√£o jur√≠dica.

NARRATIVA DO CASO:
${narrative}

TIPO DE A√á√ÉO: ${actionType}

DOCUMENTOS ANEXADOS:
${documentsInfo}

Identifique:
1. Inconsist√™ncias entre a narrativa e os documentos
2. Documentos que parecem contradizer a narrativa
3. Lacunas ou documentos em falta

Responda APENAS no formato JSON:
{
  "inconsistencies": ["lista de inconsist√™ncias encontradas"],
  "overallConsistency": 0.0-1.0,
  "recommendations": ["lista de recomenda√ß√µes"]
}
`

      const response = await withRetry(() =>
        this.openai.chat.completions.create({
          model: "gpt-4o-mini", // ‚úÖ TROCADO: 85% mais barato
          messages: [
            {
              role: "system",
              content: "Voc√™ √© um assistente jur√≠dico especializado em an√°lise de consist√™ncia documental."
            },
            {
              role: "user",
              content: prompt
            }
          ],
          max_tokens: 800,
          temperature: 0.1
        })
      );

      const content = response.choices[0]?.message?.content
      if (!content) {
        throw new Error('Resposta vazia da OpenAI')
      }

      // ‚úÖ CORRE√á√ÉO: Limpar markdown da resposta (```json ... ```)
      let cleanContent = content.trim()

      // Remover backticks e marcadores de c√≥digo
      cleanContent = cleanContent.replace(/```json\s*/g, '')
      cleanContent = cleanContent.replace(/```\s*/g, '')
      cleanContent = cleanContent.trim()

      console.log('üßπ Conte√∫do limpo para parse:', cleanContent.substring(0, 200))

      const result = JSON.parse(cleanContent)
      return {
        inconsistencies: Array.isArray(result.inconsistencies) ? result.inconsistencies : [],
        overallConsistency: Number(result.overallConsistency) || 0.5,
        recommendations: Array.isArray(result.recommendations) ? result.recommendations : []
      }

    } catch (error) {
      console.error('Erro na detec√ß√£o de inconsist√™ncias:', error)
      return {
        inconsistencies: [],
        overallConsistency: 0.5,
        recommendations: ['Erro na an√°lise - revis√£o manual recomendada']
      }
    }
  }
}