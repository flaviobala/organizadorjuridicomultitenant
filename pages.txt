page 1

//src/app/dashboard/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { 
  Plus, 
  Search, 
  FileText, 
  Calendar, 
  User, 
  Settings, 
  LogOut,
  Eye,
  Edit3,
  Trash2,
  CheckCircle,
  Clock,
  AlertCircle,
  Scale,
  TrendingUp,
  Database,
  HardDrive,
  Activity,
  BarChart3,
  PieChart,
  Download,
  Upload,
  Bot,
  FileCheck
} from 'lucide-react'

interface Project {
  id: number
  name: string
  client: string
  system: string
  actionType: string
  status: string
  createdAt: string
  updatedAt: string
  documentsCount: number
  totalSizeBytes?: number
  processedNarrative?: boolean
  validatedDocs?: boolean
}

interface User {
  id: number
  name: string
  email: string
}

interface DashboardStats {
  projects: {
    total: number
    draft: number
    processing: number
    completed: number
    validated: number
  }
  documents: {
    total: number
    totalSizeBytes: number
    avgPerProject: number
    withOCR: number
    validated: number
  }
  activity: {
    projectsThisWeek: number
    documentsThisWeek: number
    processedNarratives: number
  }
}

interface RecentActivity {
  id: number
  type: 'project_created' | 'document_uploaded' | 'narrative_processed' | 'docs_validated'
  projectName: string
  description: string
  createdAt: string
}

export default function DashboardPage() {
  const router = useRouter()
  const [user, setUser] = useState<User | null>(null)
  const [projects, setProjects] = useState<Project[]>([])
  const [stats, setStats] = useState<DashboardStats | null>(null)
  const [recentActivity, setRecentActivity] = useState<RecentActivity[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [statusFilter, setStatusFilter] = useState('all')

  useEffect(() => {
    // Verificar autenticação
    const token = localStorage.getItem('token')
    const userData = localStorage.getItem('user')

    if (!token || !userData) {
      router.push('/login')
      return
    }

    setUser(JSON.parse(userData))
    loadDashboardData()
  }, [router])

  const loadDashboardData = async () => {
    try {
      const token = localStorage.getItem('token')
      
      // Carregar projetos
      const projectsResponse = await fetch('/api/projects', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
      const projectsData = await projectsResponse.json()

     
      // Se a API de stats existir, usar, senão calcular localmente
    // ✅ USAR SEMPRE CÁLCULO LOCAL:
    if (projectsData.success) {
      setProjects(projectsData.projects)
      // Calcular stats localmente
      calculateLocalStats(projectsData.projects || [])
  }
 else {
        // Calcular stats localmente se API não existir
        calculateLocalStats(projectsData.projects || [])
      }

    } catch (error) {
      console.error('Erro ao carregar dashboard:', error)
      // Fallback para dados locais
      if (projects.length > 0) {
        calculateLocalStats(projects)
      }
    } finally {
      setIsLoading(false)
    }
  }

  const calculateLocalStats = (projectsList: Project[]) => {
  const now = new Date()
  const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)

  const localStats: DashboardStats = {
    projects: {
      total: projectsList.length,
      draft: projectsList.filter(p => p.status === 'draft').length,
      processing: projectsList.filter(p => p.status === 'processing').length,
      completed: projectsList.filter(p => p.status === 'completed').length,
      validated: projectsList.filter(p => p.status === 'validated').length,
    },
    documents: {
      total: projectsList.reduce((sum, p) => sum + p.documentsCount, 0),
      totalSizeBytes: projectsList.reduce((sum, p) => sum + (p.totalSizeBytes || 0), 0),
      avgPerProject: projectsList.length > 0 
        ? Math.round(projectsList.reduce((sum, p) => sum + p.documentsCount, 0) / projectsList.length * 10) / 10
        : 0,
      withOCR: 0,
      validated: projectsList.filter(p => p.validatedDocs).length,
    },
    activity: {
      projectsThisWeek: projectsList.filter(p => new Date(p.createdAt) > oneWeekAgo).length,
      documentsThisWeek: 0,
      processedNarratives: projectsList.filter(p => p.processedNarrative).length,
    }
  } // ← FECHAMENTO DO localStats

  // Gerar atividades baseadas nos projetos
  const fakeActivity: RecentActivity[] = projectsList
    .sort((a, b) => new Date(b.updatedAt || b.createdAt).getTime() - new Date(a.updatedAt || a.createdAt).getTime())
    .slice(0, 5)
    .map((project, index) => ({
      id: project.id + 1000,
      type: index % 2 === 0 ? 'project_created' : 'document_uploaded',
      projectName: project.name,
      description: index % 2 === 0 
        ? `Projeto "${project.name}" foi criado`
        : `Documentos adicionados ao projeto "${project.name}"`,
      createdAt: project.updatedAt || project.createdAt
    }))

  setStats(localStats)
  setRecentActivity(fakeActivity)
} // ← FECHAMENTO DA FUNÇÃO

  const handleLogout = () => {
    localStorage.removeItem('token')
    localStorage.removeItem('user')
    router.push('/login')
  }

 const handleDelete = async (projectId: number) => {
    if (!confirm('Tem certeza que deseja excluir este projeto? Esta ação não pode ser desfeita.')) {
      return
    }

    try {
      const token = localStorage.getItem('token')
      const response = await fetch(`/api/projects/${projectId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })

      const data = await response.json()

      if (data.success) {
        // Remover o projeto da lista local
        setProjects(projects.filter(p => p.id !== projectId))
        alert('Projeto excluído com sucesso!')
        loadDashboardData() // Recarregar stats
      } else {
        alert('Erro ao excluir projeto: ' + (data.error || 'Erro desconhecido'))
      }
    } catch (error) {
      console.error('Erro ao excluir projeto:', error)
      alert('Erro ao excluir projeto. Tente novamente.')
    }
  }

  const getStatusInfo = (status: string) => {
    switch (status) {
      case 'draft':
        return { label: 'Rascunho', color: 'text-gray-600 bg-gray-100', icon: Edit3 }
      case 'processing':
        return { label: 'Processando', color: 'text-blue-600 bg-blue-100', icon: Clock }
      case 'completed':
        return { label: 'Concluído', color: 'text-green-600 bg-green-100', icon: CheckCircle }
      case 'validated':
        return { label: 'Validado', color: 'text-purple-600 bg-purple-100', icon: CheckCircle }
      default:
        return { label: 'Desconhecido', color: 'text-gray-600 bg-gray-100', icon: AlertCircle }
    }
  }

  const getActivityIcon = (type: string) => {
    switch (type) {
      case 'project_created': return Plus
      case 'document_uploaded': return Upload
      case 'narrative_processed': return Bot
      case 'docs_validated': return FileCheck
      default: return Activity
    }
  }

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i]
  }

  const filteredProjects = projects.filter(project => {
    const matchesSearch = project.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         project.client.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesStatus = statusFilter === 'all' || project.status === statusFilter
    return matchesSearch && matchesStatus
  })

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Carregando...</p>
        </div>
      </div>
    )
  }

  return (
    // <div className="min-h-screen bg-gray-50">
    <div className="min-h-screen bg-gray-100">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-6 sm:px-4 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <Scale className="w-8 h-8 text-blue-600 mr-3" />
              <h1 className="text-xl font-semibold text-gray-900">Sistema Jurídico</h1>
            </div>

            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2 text-gray-700">
                <User className="w-5 h-5" />
                <span className="text-sm">{user?.name}</span>
              </div>
              
              <button
                onClick={handleLogout}
                className="flex items-center space-x-2 text-gray-600 hover:text-red-600 transition-colors"
              >
                <LogOut className="w-5 h-5" />
                <span className="text-sm">Sair</span>
              </button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Welcome Section */}
            <div className="mb-8 px-4 sm:px-0 text-center">
              <h2 className="text-2xl font-bold text-gray-900 mb-2">
                Bem-vindo, {user?.name}!
              </h2>
              <p className="text-gray-600 max-w-2xl mx-auto">
                Gerencie seus processos e documentos jurídicos de forma eficiente.
              </p>
            </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8 mb-8">
          {/* Main Stats */}
          <div className="lg:col-span-3">
            {/* Primary Stats Cards */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
              <div className="bg-white rounded-lg shadow p-6">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <FileText className="w-6 h-6 text-blue-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-500">Total Projetos</p>
                    <p className="text-2xl font-semibold text-gray-900">{stats?.projects.total || 0}</p>
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-lg shadow p-6">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <Edit3 className="w-6 h-6 text-gray-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-500">Rascunhos</p>
                    <p className="text-2xl font-semibold text-gray-900">{stats?.projects.draft || 0}</p>
                  </div>
                </div>
              </div>

              {/* <div className="bg-white rounded-lg shadow p-6">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <Clock className="w-6 h-6 text-blue-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-500">Processando</p>
                    <p className="text-2xl font-semibold text-gray-900">{stats?.projects.processing || 0}</p>
                  </div>
                </div>
              </div> */}

              <div className="bg-white rounded-lg shadow p-6">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <CheckCircle className="w-6 h-6 text-green-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-500">Concluídos</p>
                    <p className="text-2xl font-semibold text-gray-900">{stats?.projects.completed || 0}</p>
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-lg shadow p-6">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <CheckCircle className="w-6 h-6 text-purple-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-500">Validados</p>
                    <p className="text-2xl font-semibold text-gray-900">{stats?.projects.validated || 0}</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Secondary Stats */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-12">
              <div className="bg-white rounded-lg shadow p-6">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <Database className="w-6 h-6 text-indigo-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-500">Total Documentos</p>
                    <p className="text-xl font-semibold text-gray-900">{stats?.documents.total || 0}</p>
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-lg shadow p-6">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <HardDrive className="w-6 h-6 text-orange-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-500">Espaço Usado</p>
                    <p className="text-xl font-semibold text-gray-900">
                      {formatFileSize(stats?.documents.totalSizeBytes || 0)}
                    </p>
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-lg shadow p-6">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <BarChart3 className="w-6 h-6 text-green-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-500">Média/Projeto</p>
                    <p className="text-xl font-semibold text-gray-900">{stats?.documents.avgPerProject || 0}</p>
                  </div>
                </div>
              </div>

              {/* <div className="bg-white rounded-lg shadow p-6">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <TrendingUp className="w-6 h-6 text-pink-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-500">Esta Semana</p>
                    <p className="text-xl font-semibold text-gray-900">{stats?.activity.projectsThisWeek || 0}</p>
                  </div>  <div className="bg-white rounded-lg shadow p-6 min
                </div>
              </div> */}
            </div>
          </div>

          {/* Sidebar with Recent Activity */}
          <div className="lg:col-span-1">
            {/* <div className="bg-white rounded-lg shadow p-6"> */}
            <div className="bg-white rounded-lg shadow p-6 min-h-[400px]">
              <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
                <Activity className="w-5 h-5 mr-2 text-blue-600" />
                Atividade Recente
              </h3>
              <div className="space-y-4">
                {recentActivity.length > 0 ? (
                  recentActivity.slice(0, 5).map((activity) => {
                    const ActivityIcon = getActivityIcon(activity.type)
                    return (
                      <div key={activity.id} className="flex items-start space-x-3">
                        <div className="flex-shrink-0">
                          <ActivityIcon className="w-4 h-4 text-gray-500 mt-1" />
                        </div>
                        <div className="flex-1 min-w-0">
                          <p className="text-sm text-gray-900 font-medium">
                            {activity.projectName}
                          </p>
                          <p className="text-xs text-gray-500">
                            {activity.description}
                          </p>
                          <p className="text-xs text-gray-400">
                            {new Date(activity.createdAt).toLocaleDateString('pt-BR')}
                          </p>
                        </div>
                      </div>
                    )
                  })
                ) : (
                  <div className="text-center py-4">
                    <Activity className="w-8 h-8 text-gray-300 mx-auto mb-2" />
                    <p className="text-sm text-gray-500">Nenhuma atividade recente</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Actions Bar */}
        {/* <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6"> */}
          <div className="flex flex-col sm:flex-row justify-between items-center gap-4 mb-6">
          <div className="flex flex-col sm:flex-row gap-4 flex-1">
            {/* Search */}
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Buscar projetos..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 placeholder-gray-500"
             />
            </div>

            {/* Status Filter */}
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 placeholder-gray-500"
            >
              <option value="all">Todos os status</option>
              <option value="draft">Rascunho</option>
              <option value="completed">Concluído</option>
              <option value="validated">Validado</option>
            </select>
          </div>

          {/* New Project Button */}
          <button
            onClick={() => router.push('/projects/new')}
            className="flex items-center space-x-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
          >
            <Plus className="w-5 h-5" />
            <span>Novo Projeto</span>
          </button>
        </div>

        {/* Projects List */}
        <div className="bg-white rounded-lg shadow overflow-hidden">
          {filteredProjects.length === 0 ? (
            <div className="text-center py-12">
              <FileText className="w-12 h-12 text-gray-300 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                {searchTerm || statusFilter !== 'all' ? 'Nenhum projeto encontrado' : 'Nenhum projeto ainda'}
              </h3>
              <p className="text-gray-500 mb-6">
                {searchTerm || statusFilter !== 'all' 
                  ? 'Tente ajustar os filtros de busca' 
                  : 'Comece criando seu primeiro projeto jurídico'}
              </p>
              {!searchTerm && statusFilter === 'all' && (
                <button
                  onClick={() => router.push('/projects/new')}
                  className="inline-flex items-center space-x-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                >
                  <Plus className="w-5 h-5" />
                  <span>Criar Primeiro Projeto</span>
                </button>
              )}
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Projeto
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Cliente
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Sistema
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Documentos
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Atualizado em
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Ações
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredProjects.map((project) => {
                    const statusInfo = getStatusInfo(project.status)
                    const StatusIcon = statusInfo.icon

                    return (
                      <tr key={project.id} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div>
                            <div className="text-sm font-medium text-gray-900">
                              {project.name}
                            </div>
                            <div className="text-sm text-gray-500">
                              {project.actionType}
                            </div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {project.client}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {project.system}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${statusInfo.color}`}>
                            <StatusIcon className="w-3 h-3 mr-1" />
                            {statusInfo.label}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm text-gray-900">
                            {project.documentsCount} documento{project.documentsCount !== 1 ? 's' : ''}
                          </div>
                          {project.totalSizeBytes && (
                            <div className="text-xs text-gray-500">
                              {formatFileSize(project.totalSizeBytes)}
                            </div>
                          )}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {new Date(project.updatedAt || project.createdAt).toLocaleDateString('pt-BR')}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                          <div className="flex items-center justify-end space-x-2">
                            <button
                              onClick={() => router.push(`/projects/${project.id}`)}
                              className="text-blue-600 hover:text-blue-900 p-1 rounded transition-colors"
                              title="Visualizar projeto"
                            >
                              <Eye className="w-4 h-4" />
                            </button>
        
                            <button
                              onClick={() => handleDelete(project.id)}
                              className="text-red-600 hover:text-red-900 p-1 rounded transition-colors"
                              title="Excluir projeto"
                            >
                              <Trash2 className="w-4 h-4" />
                            </button>
                          </div>
                        </td>
                      </tr>
                    )
                  })}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

page 2

//src/app/login/page.tsx
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import { Eye, EyeOff, Scale, UserPlus, LogIn } from 'lucide-react'

const loginSchema = z.object({
  email: z.string().email('Email inválido'),
  password: z.string().min(1, 'Senha é obrigatória'),
})

const registerSchema = z.object({
  name: z.string().min(2, 'Nome deve ter pelo menos 2 caracteres'),
  email: z.string().email('Email inválido'),
  password: z.string().min(6, 'Senha deve ter pelo menos 6 caracteres'),
  confirmPassword: z.string(),
}).refine((data) => data.password === data.confirmPassword, {
  message: "Senhas não coincidem",
  path: ["confirmPassword"],
})

type LoginFormData = z.infer<typeof loginSchema>
type RegisterFormData = z.infer<typeof registerSchema>

export default function LoginPage() {
  const router = useRouter()
  const [isLogin, setIsLogin] = useState(true)
  const [showPassword, setShowPassword] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [message, setMessage] = useState<{ type: 'error' | 'success', text: string } | null>(null)

  const loginForm = useForm<LoginFormData>({
    resolver: zodResolver(loginSchema),
  })

  const registerForm = useForm<RegisterFormData>({
    resolver: zodResolver(registerSchema),
  })

  const onLogin = async (data: LoginFormData) => {
    setIsLoading(true)
    setMessage(null)

    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      })

      const result = await response.json()

      if (result.success) {
        localStorage.setItem('token', result.token)
        localStorage.setItem('user', JSON.stringify(result.user))
        setMessage({ type: 'success', text: 'Login realizado com sucesso!' })
        setTimeout(() => router.push('/dashboard'), 1000)
      } else {
        setMessage({ type: 'error', text: result.message || 'Erro no login' })
      }
    } catch (error) {
      setMessage({ type: 'error', text: 'Erro de conexão' })
    } finally {
      setIsLoading(false)
    }
  }

  const onRegister = async (data: RegisterFormData) => {
    setIsLoading(true)
    setMessage(null)

    try {
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: data.name,
          email: data.email,
          password: data.password,
        }),
      })

      const result = await response.json()

      if (result.success) {
        localStorage.setItem('token', result.token)
        localStorage.setItem('user', JSON.stringify(result.user))
        setMessage({ type: 'success', text: 'Conta criada com sucesso!' })
        setTimeout(() => router.push('/dashboard'), 1000)
      } else {
        setMessage({ type: 'error', text: result.message || 'Erro no cadastro' })
      }
    } catch (error) {
      setMessage({ type: 'error', text: 'Erro de conexão' })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-950 via-blue-900 to-slate-900 flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex justify-center mb-4">
            <div className="bg-blue-600 p-3 rounded-full">
             <Scale className="w-8 h-8 text-white" />
              </div>
             </div>
            <h1 className="text-3xl font-bold text-white mb-2">Sistema Jurídico</h1>
          <p className="text-blue-200">Gestão completa de processos e documentos</p>
        </div>
        {/* Card */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
         {/* Toggle Login/Register */}
          <div className="flex bg-gray-100 rounded-lg p-1 mb-6">
            <button
              className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all ${
                isLogin
                  ? 'bg-white text-blue-600 shadow-sm'
                  : 'text-gray-600 hover:text-blue-600'
              }`}
              onClick={() => setIsLogin(true)}
            >
              <LogIn className="w-4 h-4 inline mr-2" />
              Entrar
            </button>
            <button
              className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all ${
                !isLogin
                  ? 'bg-white text-blue-600 shadow-sm'
                  : 'text-gray-600 hover:text-blue-600'
              }`}
              onClick={() => setIsLogin(false)}
            >
              <UserPlus className="w-4 h-4 inline mr-2" />
              Cadastrar
            </button>
          </div>

          {/* Message */}
          {message && (
            <div className={`p-3 rounded-lg mb-4 text-sm ${
              message.type === 'error' 
                ? 'bg-red-50 text-red-700 border border-red-200'
                : 'bg-green-50 text-green-700 border border-green-200'
            }`}>
              {message.text}
            </div>
          )}

          {/* Login Form */}
          {isLogin ? (
            <form onSubmit={loginForm.handleSubmit(onLogin)} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Email
                </label>
                <input
                  type="email"
                  {...loginForm.register('email')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900"
                  placeholder="seu@email.com"
                />
                {loginForm.formState.errors.email && (
                  <p className="text-red-500 text-xs mt-1">
                    {loginForm.formState.errors.email.message}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Senha
                </label>
                <div className="relative">
                  <input
                    type={showPassword ? 'text' : 'password'}
                    {...loginForm.register('password')}
                    className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900"
                    placeholder="Sua senha"
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-2 top-2 text-gray-500 hover:text-gray-700"
                  >
                    {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                  </button>
                </div>
                {loginForm.formState.errors.password && (
                  <p className="text-red-500 text-xs mt-1">
                  {loginForm.formState.errors.password.message}
                  </p>
                )}
              </div>
              <button
                type="submit"
                disabled={isLoading}
                className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                {isLoading ? 'Entrando...' : 'Entrar'}
              </button>
            </form>
          ) : (
            /* Register Form */
            <form onSubmit={registerForm.handleSubmit(onRegister)} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Nome completo
                </label>
                <input
                  type="text"
                  {...registerForm.register('name')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900"
                  placeholder="Seu nome completo"
                />
                {registerForm.formState.errors.name && (
                  <p className="text-red-500 text-xs mt-1">
                    {registerForm.formState.errors.name.message}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Email
                </label>
                <input
                  type="email"
                  {...registerForm.register('email')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900"
                  placeholder="seu@email.com"
                />
                {registerForm.formState.errors.email && (
                  <p className="text-red-500 text-xs mt-1">
                    {registerForm.formState.errors.email.message}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Senha
                </label>
                <div className="relative">
                  <input
                    type={showPassword ? 'text' : 'password'}
                    {...registerForm.register('password')}
                    className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900"
                    placeholder="Mínimo 6 caracteres"
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-2 top-2 text-gray-500 hover:text-gray-700"
                  >
                    {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                  </button>
                </div>
                {registerForm.formState.errors.password && (
                  <p className="text-red-500 text-xs mt-1">
                    {registerForm.formState.errors.password.message}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Confirmar senha
                </label>
                <input
                  type={showPassword ? 'text' : 'password'}
                  {...registerForm.register('confirmPassword')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900"
                  placeholder="Confirme sua senha"
                />
                {registerForm.formState.errors.confirmPassword && (
                  <p className="text-red-500 text-xs mt-1">
                    {registerForm.formState.errors.confirmPassword.message}
                  </p>
                )}
              </div>

              <button
                type="submit"
                disabled={isLoading}
                className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                {isLoading ? 'Criando conta...' : 'Criar conta'}
              </button>
            </form>
          )}

          {/* Footer */}
          <div className="mt-6 pt-6 border-t border-gray-200 text-center">
            <p className="text-xs text-gray-500">
              Sistema desenvolvido para gestão jurídica profissional
            </p>
          </div>
        </div>
      </div>
    </div>
  )
}

//src/app/projects/[id]/page.tsx
'use client'

// ✅ REMOVER IMPORT FIXO DO jsPDF - usar apenas import dinâmico
import { useState, useEffect, use, useCallback } from 'react'
import { useRouter } from 'next/navigation'
import { 
  ArrowLeft, 
  Edit3, 
  Save, 
  Upload,
  FileText, 
  Image,
  Trash2,
  Download,
  Eye,
  CheckCircle,
  Clock,
  AlertTriangle,
  Bot,
  FileCheck,
  Scale,
  User,
  Building,
  Calendar,
  Plus,
  X,
  Sparkles,
  Brain,
  Target
} from 'lucide-react'

// ✅ INTERFACES TIPADAS CORRETAMENTE
interface AIAnalysisData {
  confidence?: number
  detectedDocumentType?: string
  documentType?: string
  detectedInfo?: {
    name?: string
    cpf?: string
    rg?: string
    [key: string]: unknown
  }
  [key: string]: unknown
}

interface Project {
  id: number
  name: string
  client: string
  system: string
  actionType: string
  narrative?: string
  processedNarrative?: string
  status: string
  createdAt: string
  updatedAt: string
  documents: Document[]
}

interface Document {
  id: number
  originalFilename: string
  storedFilename?: string
  smartFilename?: string
  documentType: string
  detectedDocumentType?: string
  documentNumber: number
  mimeType: string
  status: string
  pdfPath?: string
  pageCount?: number
  originalSizeBytes: number
  pdfSizeBytes?: number
  hasOcrText?: boolean
  aiAnalysis?: AIAnalysisData
  createdAt: string
  validation?: DocumentValidation
}

interface DocumentValidation {
  isRelevant: boolean
  relevanceScore: number
  analysis: string
  suggestions?: string
  status: string
}

interface DocumentType {
  code: string
  name: string
  description?: string
  order: number
}

interface UploadResult {
  file: string
  document: Document
  aiAnalysis?: AIAnalysisData
}

export default function ProjectDetailPage({ 
  params 
}: { 
  params: Promise<{ id: string }> 
}) {
  const router = useRouter()
  const resolvedParams = use(params)
  const projectId = parseInt(resolvedParams.id)

  const [project, setProject] = useState<Project | null>(null)
  const [documentTypes, setDocumentTypes] = useState<DocumentType[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [isEditing, setIsEditing] = useState(false)
  const [isUploading, setIsUploading] = useState(false)
  const [isProcessingNarrative, setIsProcessingNarrative] = useState(false)
  const [isValidatingDocs, setIsValidatingDocs] = useState(false)
  const [isCompiling, setIsCompiling] = useState(false)
  const [isExportingSeparate, setIsExportingSeparate] = useState(false)
  
  const [selectedFiles, setSelectedFiles] = useState<FileList | null>(null)
  const [showUploadModal, setShowUploadModal] = useState(false)
  const [uploadProgress, setUploadProgress] = useState<{ [key: string]: number }>({})
  const [aiResults, setAiResults] = useState<UploadResult[]>([])
  
  // Edit states
  const [editData, setEditData] = useState({
    name: '',
    client: '',
    actionType: '',
    narrative: ''
  })

  const [message, setMessage] = useState<{ type: 'error' | 'success' | 'info', text: string } | null>(null)

  const loadProject = useCallback(async () => {
    try {
      const token = localStorage.getItem('token')
      const response = await fetch(`/api/projects/${projectId}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      const data = await response.json()

      if (data.success) {
        setProject(data.project)
        setEditData({
          name: data.project.name,
          client: data.project.client,
          actionType: data.project.actionType,
          narrative: data.project.narrative || ''
        })
      } else {
        setMessage({ type: 'error', text: data.error || 'Projeto não encontrado' })
      }
    } catch {
      setMessage({ type: 'error', text: 'Erro ao carregar projeto' })
    } finally {
      setIsLoading(false)
    }
  }, [projectId])

  const loadDocumentTypes = useCallback(async () => {
    try {
      const token = localStorage.getItem('token')
      const response = await fetch('/api/document-types', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (response.ok) {
        const data = await response.json()
        setDocumentTypes(data.documentTypes || [])
      }
    } catch {
      setDocumentTypes([
        { code: '01-identidade', name: 'Documento de Identidade', order: 1 },
        { code: '02-cnh', name: 'CNH', order: 2 },
        { code: '03-cpf', name: 'CPF', order: 3 },
        { code: '04-comprovante-residencia', name: 'Comprovante de Residência', order: 4 },
        { code: '05-procuracao', name: 'Procuração', order: 5 },
        { code: '06-declaracao-hipossuficiencia', name: 'Declaração de Hipossuficiência', order: 6 }
      ])
    }
  }, [])

  useEffect(() => {
    const token = localStorage.getItem('token')
    if (!token) {
      router.push('/login')
      return
    }

    if (isNaN(projectId)) {
      router.push('/dashboard')
      return
    }

    loadProject()
    loadDocumentTypes()
  }, [projectId, router, loadProject, loadDocumentTypes])

  const openUploadModal = () => {
    setSelectedFiles(null)
    setAiResults([])
    setUploadProgress({})
    setShowUploadModal(true)
  }

  const handleSaveProject = async () => {
    setIsEditing(false)
    try {
      const token = localStorage.getItem('token')
      const response = await fetch(`/api/projects/${projectId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(editData),
      })

      const result = await response.json()

      if (result.success) {
        setMessage({ type: 'success', text: 'Projeto atualizado com sucesso!' })
        loadProject()
      } else {
        setMessage({ type: 'error', text: result.error || 'Erro ao atualizar projeto' })
      }
    } catch {
      setMessage({ type: 'error', text: 'Erro de conexão' })
    }
  }

  const handleUploadDocuments = async () => {
    if (!selectedFiles || selectedFiles.length === 0) {
      setMessage({ type: 'error', text: 'Selecione pelo menos um arquivo' })
      return
    }

    setIsUploading(true)
    setMessage({ type: 'info', text: '🤖 Iniciando análise inteligente dos documentos...' })

    try {
      const token = localStorage.getItem('token')
      const uploadResults: UploadResult[] = []
      
      for (let i = 0; i < selectedFiles.length; i++) {
        const file = selectedFiles[i]
        const fileKey = `file_${i}`
        
        setUploadProgress(prev => ({ ...prev, [fileKey]: 0 }))
        setMessage({ 
          type: 'info', 
          text: `🧠 Analisando documento ${i + 1}/${selectedFiles.length}: ${file.name}...` 
        })

        const formData = new FormData()
        formData.append('file', file)
        formData.append('projectId', projectId.toString())
        
        const nextDocNumber = project?.documents ? project.documents.length + i + 1 : i + 1
        formData.append('documentNumber', nextDocNumber.toString())
        formData.append('documentType', 'auto-detect')

        setUploadProgress(prev => ({ ...prev, [fileKey]: 25 }))

        const response = await fetch('/api/documents/upload', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`
          },
          body: formData,
        })

        setUploadProgress(prev => ({ ...prev, [fileKey]: 75 }))

        const result = await response.json()

        if (result.success) {
          setUploadProgress(prev => ({ ...prev, [fileKey]: 100 }))
          
          uploadResults.push({
            file: file.name,
            document: result.document,
            aiAnalysis: result.document.aiAnalysis
          })

          if (result.document.aiAnalysis) {
            console.log(`🧠 IA analisou ${file.name}:`, {
              tipo_detectado: result.document.detectedDocumentType,
              nome_inteligente: result.document.smartFilename,
              confiança: result.document.aiAnalysis.confidence
            })
          }

        } else {
          setUploadProgress(prev => ({ ...prev, [fileKey]: 0 }))
          throw new Error(`Erro no arquivo ${file.name}: ${result.error}`)
        }
      }

      setAiResults(uploadResults)
      
      const successCount = uploadResults.length
      const aiAnalyzedCount = uploadResults.filter(r => r.aiAnalysis).length
      
      setMessage({ 
        type: 'success', 
        text: `🎯 ${successCount} documento(s) processado(s)! IA analisou ${aiAnalyzedCount} automaticamente.` 
      })
      
      setShowUploadModal(false)
      setSelectedFiles(null)
      loadProject()

    } catch (error) {
      setMessage({ type: 'error', text: error instanceof Error ? error.message : 'Erro no upload' })
    } finally {
      setIsUploading(false)
      setUploadProgress({})
    }
  }

  const handleProcessNarrative = async () => {
    const narrativeToProcess = isEditing ? editData.narrative : project?.narrative
    
    if (!narrativeToProcess) {
      setMessage({ type: 'error', text: 'Adicione uma narrativa antes de processar' })
      return
    }

    setIsProcessingNarrative(true)
    setMessage({ type: 'info', text: 'Processando narrativa com IA...' })

    try {
      const token = localStorage.getItem('token')
      const response = await fetch('/api/ai/process-narrative', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          projectId: project?.id,
          narrative: narrativeToProcess
        }),
      })

      const result = await response.json()

      if (result.success) {
        setMessage({ type: 'success', text: 'Narrativa processada pela IA com sucesso!' })
        loadProject()
      } else {
        setMessage({ type: 'error', text: result.error || 'Erro no processamento da narrativa' })
      }
    } catch {
      setMessage({ type: 'error', text: 'Erro de conexão' })
    } finally {
      setIsProcessingNarrative(false)
    }
  }

  const handleValidateDocuments = async () => {
    if (!project?.documents || project.documents.length === 0) {
      setMessage({ type: 'error', text: 'Adicione documentos antes de validar' })
      return
    }

    if (!project.processedNarrative) {
      setMessage({ type: 'error', text: 'Processe a narrativa antes de validar os documentos' })
      return
    }

    setIsValidatingDocs(true)
    setMessage({ type: 'info', text: 'Validando documentos com IA...' })

    try {
      const token = localStorage.getItem('token')
      const response = await fetch('/api/ai/validate-documents', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          projectId: project.id
        }),
      })

      const result = await response.json()

      if (result.success) {
        setMessage({ type: 'success', text: 'Documentos validados pela IA com sucesso!' })
        loadProject()
      } else {
        setMessage({ type: 'error', text: result.error || 'Erro na validação dos documentos' })
      }
    } catch {
      setMessage({ type: 'error', text: 'Erro de conexão' })
    } finally {
      setIsValidatingDocs(false)
    }
  }

  const handleCompileDocuments = async () => {
    if (!project) return

    setIsCompiling(true)
    setMessage({ type: 'info', text: 'Compilando documentos em PDF único...' })

    try {
      const token = localStorage.getItem('token')
      const response = await fetch(`/api/projects/${project.id}/compile`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (response.ok) {
        const blob = await response.blob()
        const url = window.URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.style.display = 'none'
        a.href = url
        a.download = `${project.name}_COMPILADO.pdf`
        document.body.appendChild(a)
        a.click()
        window.URL.revokeObjectURL(url)
        document.body.removeChild(a)
        
        setMessage({ type: 'success', text: 'PDF compilado gerado e baixado com sucesso!' })
      } else {
        const errorData = await response.json()
        setMessage({ type: 'error', text: errorData.error || 'Erro ao compilar documentos' })
      }
    } catch {
      setMessage({ type: 'error', text: 'Erro de conexão' })
    } finally {
      setIsCompiling(false)
    }
  }

  const handleDownloadDocument = async (doc: Document) => {
    try {
      const token = localStorage.getItem('token')
      const response = await fetch(`/api/documents/${doc.id}/download`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (response.ok) {
        const blob = await response.blob()
        const url = window.URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.style.display = 'none'
        a.href = url
        a.download = doc.originalFilename
        document.body.appendChild(a)
        a.click()
        window.URL.revokeObjectURL(url)
        document.body.removeChild(a)
        
        setMessage({ type: 'success', text: 'Documento baixado com sucesso!' })
      } else {
        const errorData = await response.json()
        setMessage({ type: 'error', text: errorData.error || 'Erro ao baixar documento' })
      }
    } catch {
      setMessage({ type: 'error', text: 'Erro de conexão' })
    }
  }

  const handleDeleteDocument = async (doc: Document) => {
    if (!confirm(`Tem certeza que deseja excluir o documento "${doc.originalFilename}"?`)) {
      return
    }

    try {
      const token = localStorage.getItem('token')
      const response = await fetch(`/api/documents/${doc.id}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      const result = await response.json()

      if (result.success) {
        setMessage({ type: 'success', text: 'Documento excluído com sucesso!' })
        loadProject()
      } else {
        setMessage({ type: 'error', text: result.error || 'Erro ao excluir documento' })
      }
    } catch {
      setMessage({ type: 'error', text: 'Erro de conexão' })
    }
  }

  // ✅ FUNÇÃO EXPORT ZIP CORRIGIDA
  const handleExportZipPDFs = async () => {
    if (!project?.documents || project.documents.length === 0) {
      setMessage({ type: 'error', text: 'Nenhum documento para exportar em ZIP' })
      return
    }

    setIsExportingSeparate(true)
    setMessage({ type: 'info', text: '🧠 IA preparando arquivo ZIP com nomenclatura inteligente...' })

    try {
      const token = localStorage.getItem('token')
      
      console.log('📦 Iniciando export ZIP com IA para projeto:', project.id)
      
      const response = await fetch(`/api/projects/${project.id}/export-zip`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ error: 'Erro desconhecido' }))
        throw new Error(errorData.error || `Erro HTTP ${response.status}`)
      }

      const blob = await response.blob()
      const url = window.URL.createObjectURL(blob)
      
      const contentDisposition = response.headers.get('Content-Disposition')
      let filename = `${project.name}_Documentos.zip`
      
      if (contentDisposition) {
        const filenameMatch = contentDisposition.match(/filename="([^"]+)"/)
        if (filenameMatch) {
          filename = filenameMatch[1]
        }
      }

      const a = document.createElement('a')
      a.style.display = 'none'
      a.href = url
      a.download = filename
      document.body.appendChild(a)
      a.click()
      
      window.URL.revokeObjectURL(url)
      document.body.removeChild(a)
      
      console.log('✅ ZIP com nomenclatura IA baixado:', filename)
      
      try {
        const updateResponse = await fetch(`/api/projects/${project.id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({
            ...project,
            status: 'completed'
          })
        })

        if (updateResponse.ok) {
          console.log('📋 Status atualizado para concluído')
          loadProject()
        }
      } catch (error) {
        console.warn('⚠️ Erro ao atualizar status:', error)
      }

      setMessage({ 
        type: 'success', 
        text: `🧠 ZIP com nomenclatura IA baixado com sucesso! Projeto concluído.` 
      })

    } catch (error) {
      console.error('❌ Erro no export ZIP:', error)
      setMessage({ 
        type: 'error', 
        text: `Erro ao gerar ZIP: ${error instanceof Error ? error.message : 'Erro desconhecido'}` 
      })
    } finally {
      setIsExportingSeparate(false)
    }
  }

  // ✅ FUNÇÃO EXPORT SEPARADO CORRIGIDA
  const handleExportSeparatePDFs = async () => {
    if (!project?.documents || project.documents.length === 0) {
      setMessage({ type: 'error', text: 'Nenhum documento para exportar' })
      return
    }

    setIsExportingSeparate(true)
    setMessage({ type: 'info', text: '📥 Baixando todos os PDFs (incluindo narrativa)...' })

    try {
      const token = localStorage.getItem('token')
      let downloadedCount = 0
      let errorCount = 0

      console.log(`📥 Iniciando download de ${project.documents.length} documentos + narrativa`)

      // ✅ 1. BAIXAR NARRATIVA FÁTICA PRIMEIRO (se existir)
      if (project.processedNarrative) {
        try {
          console.log('📝 Gerando PDF da narrativa fática...')
          
          // ✅ IMPORT DINÂMICO CORRETO DO jsPDF
          const jsPDF = (await import('jspdf')).default
          const doc = new jsPDF()
          
          const pageWidth = doc.internal.pageSize.width
          const margin = 20
          const maxWidth = pageWidth - 2 * margin
          
          doc.setFontSize(18)
          doc.text('NARRATIVA DOS FATOS', pageWidth / 2, 40, { align: 'center' })
          doc.setFontSize(12)
          doc.text('PROCESSADA POR INTELIGÊNCIA ARTIFICIAL', pageWidth / 2, 55, { align: 'center' })
          
          let yPos = 80
          
          doc.setFontSize(12)
          doc.text(`Projeto: ${project.name}`, margin, yPos)
          yPos += 8
          doc.text(`Cliente: ${project.client}`, margin, yPos)
          yPos += 8
          doc.text(`Tipo de Ação: ${project.actionType}`, margin, yPos)
          yPos += 8
          doc.text(`Sistema: ${project.system}`, margin, yPos)
          yPos += 20

          doc.setFontSize(14)
          doc.text('NARRATIVA PROCESSADA:', margin, yPos)
          yPos += 15
          
          doc.setFontSize(11)
          const textLines = project.processedNarrative.split('\n')
          
          for (const line of textLines) {
            if (line.trim()) {
              const wrappedLines = doc.splitTextToSize(line, maxWidth)
              if (yPos + (wrappedLines.length * 6) > 270) {
                doc.addPage()
                yPos = 30
              }
              doc.text(wrappedLines, margin, yPos)
              yPos += wrappedLines.length * 6
            } else {
              yPos += 6
            }
          }
          
          if (yPos > 250) {
            doc.addPage()
            yPos = 30
          }
          
          doc.setFontSize(8)
          const footerText = `Documento gerado automaticamente em ${new Date().toLocaleDateString('pt-BR')} às ${new Date().toLocaleTimeString('pt-BR')}`
          doc.text(footerText, pageWidth / 2, yPos + 20, { align: 'center' })
          
          doc.save('01 Narrativa Fática.pdf')
          downloadedCount++
          console.log('✅ Narrativa fática baixada')
          
          await new Promise(resolve => setTimeout(resolve, 1000))
          
        } catch (error) {
          console.error('❌ Erro ao gerar PDF da narrativa:', error)
          errorCount++
        }
      }

      // ✅ 2. BAIXAR TODOS OS PDFs DOS DOCUMENTOS
      for (const doc of project.documents) {
        try {
          if (!doc.pdfPath) {
            console.error(`❌ Documento ${doc.originalFilename} sem PDF convertido`)
            errorCount++
            continue
          }

          console.log(`📄 Baixando: ${doc.originalFilename}`)

          const response = await fetch(`/api/documents/${doc.id}/download`, {
            headers: { 'Authorization': `Bearer ${token}` }
          })

          if (response.ok) {
            const blob = await response.blob()
            const url = window.URL.createObjectURL(blob)
            const a = document.createElement('a')
            a.style.display = 'none'
            a.href = url
            
            let fileName = doc.smartFilename || (doc.originalFilename.endsWith('.pdf') 
              ? doc.originalFilename 
              : `${doc.originalFilename.replace(/\.[^/.]+$/, '')}.pdf`)
            
            a.download = fileName
            document.body.appendChild(a)
            a.click()
            window.URL.revokeObjectURL(url)
            document.body.removeChild(a)
            
            downloadedCount++
            console.log(`✅ Download ${downloadedCount}: ${fileName}`)
            
            await new Promise(resolve => setTimeout(resolve, 800))
          } else {
            console.error(`❌ Erro HTTP ${response.status} ao baixar ${doc.originalFilename}`)
            errorCount++
          }
        } catch (error) {
          console.error(`❌ Erro no download de ${doc.originalFilename}:`, error)
          errorCount++
        }
      }

      // ✅ 3. ATUALIZAR STATUS E MOSTRAR RESULTADO
      if (downloadedCount > 0) {
        try {
          const updateResponse = await fetch(`/api/projects/${project.id}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ ...project, status: 'completed' })
          })

          if (updateResponse.ok) {
            console.log('📋 Status atualizado para concluído')
            loadProject()
          }
        } catch (error) {
          console.warn('⚠️ Erro ao atualizar status:', error)
        }

        const narrativeText = project.processedNarrative ? ' (incluindo narrativa fática)' : ''
        setMessage({ 
          type: 'success', 
          text: `✅ ${downloadedCount} PDF(s) baixado(s) com sucesso${narrativeText}! Projeto marcado como concluído.${errorCount > 0 ? ` (${errorCount} com erro)` : ''}` 
        })
      } else {
        setMessage({ type: 'error', text: 'Nenhum PDF pôde ser baixado. Verifique se os documentos foram convertidos corretamente.' })
      }

    } catch (error) {
      console.error('❌ Erro geral no export:', error)
      setMessage({ type: 'error', text: 'Erro de conexão ao exportar PDFs' })
    } finally {
      setIsExportingSeparate(false)
    }
  }

  const getStatusInfo = (status: string) => {
    switch (status) {
      case 'draft':
        return { label: 'Rascunho', color: 'text-gray-600 bg-gray-100', icon: Edit3 }
      case 'processing':
        return { label: 'Processando', color: 'text-blue-600 bg-blue-100', icon: Clock }
      case 'completed':
        return { label: 'Concluído', color: 'text-green-600 bg-green-100', icon: CheckCircle }
      case 'validated':
        return { label: 'Validado', color: 'text-purple-600 bg-purple-100', icon: CheckCircle }
      default:
        return { label: 'Desconhecido', color: 'text-gray-600 bg-gray-100', icon: AlertTriangle }
    }
  }

  const getDocumentStatusInfo = (status: string) => {
    switch (status) {
      case 'uploaded':
        return { label: 'Enviado', color: 'text-blue-600 bg-blue-100', icon: Upload }
      case 'converting':
        return { label: 'Convertendo', color: 'text-yellow-600 bg-yellow-100', icon: Clock }
      case 'converted':
        return { label: 'Convertido', color: 'text-green-600 bg-green-100', icon: FileText }
      case 'ocr_completed':
        return { label: 'OCR Concluído', color: 'text-purple-600 bg-purple-100', icon: FileCheck }
      default:
        return { label: status, color: 'text-gray-600 bg-gray-100', icon: FileText }
    }
  }

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Carregando projeto...</p>
        </div>
      </div>
    )
  }

  if (!project) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <FileText className="w-16 h-16 text-gray-300 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Projeto não encontrado</h2>
          <button
            onClick={() => router.push('/dashboard')}
            className="text-blue-600 hover:text-blue-800"
          >
            Voltar ao Dashboard
          </button>
        </div>
      </div>
    )
  }

  const statusInfo = getStatusInfo(project.status)
  const StatusIcon = statusInfo.icon

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <button
                onClick={() => router.push('/dashboard')}
                className="mr-4 p-2 text-gray-600 hover:text-gray-900 transition-colors"
              >
                <ArrowLeft className="w-5 h-5" />
              </button>
              <Scale className="w-8 h-8 text-blue-600 mr-3" />
              <div>
                <h1 className="text-xl font-semibold text-gray-900">{project.name}</h1>
                <div className="flex items-center mt-1">
                  <StatusIcon className="w-4 h-4 mr-1" />
                  <span className={`text-sm px-2 py-0.5 rounded-full ${statusInfo.color}`}>
                    {statusInfo.label}
                  </span>
                </div>
              </div>
            </div>

            <div className="flex items-center space-x-3">
              {!isEditing ? (
                <button
                  onClick={() => setIsEditing(true)}
                  className="flex items-center space-x-2 px-3 py-2 text-gray-600 hover:text-gray-900 transition-colors"
                >
                  <Edit3 className="w-4 h-4" />
                  <span>Editar</span>
                </button>
              ) : (
                <>
                  <button
                    onClick={() => setIsEditing(false)}
                    className="px-3 py-2 text-gray-600 hover:text-gray-900 transition-colors"
                  >
                    Cancelar
                  </button>
                  <button
                    onClick={handleSaveProject}
                    className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    <Save className="w-4 h-4" />
                    <span>Salvar</span>
                  </button>
                </>
              )}
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Breadcrumb */}
        <nav className="flex mb-8" aria-label="Breadcrumb">
          <ol className="inline-flex items-center space-x-1 md:space-x-3">
            <li className="inline-flex items-center">
              <button
                onClick={() => router.push('/dashboard')}
                className="text-gray-700 hover:text-blue-600"
              >
                Dashboard
              </button>
            </li>
            <li>
              <div className="flex items-center">
                <span className="text-gray-400 mx-2">/</span>
                <span className="text-gray-500">{project.name}</span>
              </div>
            </li>
          </ol>
        </nav>

        {/* Message */}
        {message && (
          <div className={`p-4 rounded-lg mb-6 flex items-center ${
            message.type === 'error' 
              ? 'bg-red-50 text-red-700 border border-red-200'
              : message.type === 'success'
              ? 'bg-green-50 text-green-700 border border-green-200'
              : 'bg-blue-50 text-blue-700 border border-blue-200'
          }`}>
            <div className="flex-shrink-0 mr-3">
              {message.type === 'error' && <AlertTriangle className="w-5 h-5" />}
              {message.type === 'success' && <CheckCircle className="w-5 h-5" />}
              {message.type === 'info' && <Clock className="w-5 h-5" />}
            </div>
            {message.text}
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-8">
            {/* Project Info */}
            <div className="bg-white rounded-lg shadow">
              <div className="px-6 py-4 border-b border-gray-200">
                <h2 className="text-lg font-medium text-gray-900">Informações do Projeto</h2>
              </div>
              <div className="p-6 space-y-4">
                {isEditing ? (
                  <>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Nome do Projeto
                      </label>
                      <input
                        type="text"
                        value={editData.name}
                        onChange={(e) => setEditData({ ...editData, name: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Cliente
                      </label>
                      <input
                        type="text"
                        value={editData.client}
                        onChange={(e) => setEditData({ ...editData, client: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Tipo de Ação
                      </label>
                      <input
                        type="text"
                        value={editData.actionType}
                        onChange={(e) => setEditData({ ...editData, actionType: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900"
                      />
                    </div>
                  </>
                ) : (
                  <>
                    <div className="flex items-center">
                      <User className="w-5 h-5 text-gray-400 mr-3" />
                      <div>
                        <p className="text-sm text-gray-500">Cliente</p>
                        <p className="font-medium text-gray-900">{project.client}</p>
                      </div>
                    </div>
                    <div className="flex items-center">
                      <Building className="w-5 h-5 text-gray-400 mr-3" />
                      <div>
                        <p className="text-sm text-gray-500">Sistema</p>
                        <p className="font-medium text-gray-900">{project.system}</p>
                      </div>
                    </div>
                    <div className="flex items-center">
                      <FileText className="w-5 h-5 text-gray-400 mr-3" />
                      <div>
                        <p className="text-sm text-gray-500">Tipo de Ação</p>
                        <p className="font-medium text-gray-900">{project.actionType}</p>
                      </div>
                    </div>
                    <div className="flex items-center">
                      <Calendar className="w-5 h-5 text-gray-400 mr-3" />
                      <div>
                        <p className="text-sm text-gray-500">Criado em</p>
                        <p className="font-medium text-gray-900">
                          {new Date(project.createdAt).toLocaleDateString('pt-BR')}
                        </p>
                      </div>
                    </div>
                  </>
                )}
              </div>
            </div>

            {/* Narrative Section */}
            <div className="bg-white rounded-lg shadow">
              <div className="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
                <h2 className="text-lg font-medium text-gray-900">Narrativa dos Fatos</h2>
                {((isEditing && editData.narrative) || (!isEditing && project.narrative)) && !project.processedNarrative && (
                  <button
                    onClick={handleProcessNarrative}
                    disabled={isProcessingNarrative}
                    className="flex items-center space-x-2 px-3 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 transition-colors"
                  >
                    <Bot className="w-4 h-4" />
                    <span>{isProcessingNarrative ? 'Organizando...' : 'Organizar Texto'}</span>
                  </button>
                )}
              </div>
              <div className="p-6">
                {isEditing ? (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Narrativa Original
                    </label>
                    <textarea
                      value={editData.narrative}
                      onChange={(e) => setEditData({ ...editData, narrative: e.target.value })}
                      rows={6}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900"
                      placeholder="Descreva os fatos relevantes do caso..."
                    />
                  
                    {project.processedNarrative && (
                      <div className="mt-4 pt-4 border-t">
                        <h3 className="text-sm font-medium text-gray-700 mb-2 flex items-center">
                          <Bot className="w-4 h-4 mr-2 text-purple-600" />
                          Narrativa Processada pela IA:
                        </h3>
                        <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                          <p className="text-gray-800 leading-relaxed">{project.processedNarrative}</p>
                        </div>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="space-y-4">
                    {project.narrative ? (
                      <>
                        <div>
                          <h3 className="text-sm font-medium text-gray-700 mb-2">Narrativa Original:</h3>
                          <p className="text-gray-600 leading-relaxed">{project.narrative}</p>
                        </div>
                        {project.processedNarrative && (
                          <div className="border-t pt-4">
                            <h3 className="text-sm font-medium text-gray-700 mb-2 flex items-center">
                              <Bot className="w-4 h-4 mr-2 text-purple-600" />
                              Narrativa Processada pela IA:
                            </h3>
                            <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                              <p className="text-gray-800 leading-relaxed">{project.processedNarrative}</p>
                            </div>
                          </div>
                        )}
                      </>
                    ) : (
                      <div className="text-center py-6">
                        <FileText className="w-12 h-12 text-gray-300 mx-auto mb-2" />
                        <p className="text-gray-500">Nenhuma narrativa adicionada ainda.</p>
                        <button
                          onClick={() => setIsEditing(true)}
                          className="text-blue-600 hover:text-blue-800 text-sm mt-2"
                        >
                          Adicionar narrativa
                        </button>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>

            {/* Documents Section */}
            <div className="bg-white rounded-lg shadow">
              <div className="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
                <h2 className="text-lg font-medium text-gray-900">
                  Documentos ({project.documents?.length || 0})
                </h2>
                <div className="flex items-center space-x-3">
                  {project.documents && project.documents.length > 0 && (
                    <>
                      <button
                        onClick={handleExportSeparatePDFs}
                        disabled={isExportingSeparate}
                        className="flex items-center space-x-2 px-3 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:opacity-50 transition-colors"
                      >
                        <Download className="w-4 h-4" />
                        <span>{isExportingSeparate ? 'Baixando...' : 'Exportar PDFs'}</span>
                      </button>
                    </>
                  )}
                  <button
                    onClick={openUploadModal}
                    className="flex items-center space-x-2 px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    <Plus className="w-4 h-4" />
                    <span>Adicionar</span>
                  </button>
                </div>
              </div>
              <div className="p-6">
                {project.documents && project.documents.length > 0 ? (
                  <div className="space-y-4">
                    {project.documents.map((doc) => {
                      const docStatusInfo = getDocumentStatusInfo(doc.status)
                      const DocStatusIcon = docStatusInfo.icon

                      return (
                        <div key={doc.id} className="border border-gray-200 rounded-lg p-4">
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <div className="flex items-center space-x-3 mb-2">
                                <span className="bg-blue-100 text-blue-800 text-xs font-medium px-2 py-1 rounded">
                                  Doc {doc.documentNumber.toString().padStart(2, '0')}
                                </span>
                                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${docStatusInfo.color}`}>
                                  <DocStatusIcon className="w-3 h-3 mr-1" />
                                  {docStatusInfo.label}
                                </span>
                                
                                {doc.detectedDocumentType && (
                                  <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                                    <Brain className="w-3 h-3 mr-1" />
                                    IA: {doc.detectedDocumentType}
                                  </span>
                                )}
                              </div>
                              
                              <h4 className="font-medium text-gray-900 mb-1">{doc.originalFilename}</h4>
                              
                              {doc.smartFilename && doc.smartFilename !== doc.originalFilename && (
                                <div className="mb-2">
                                  <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                    <Sparkles className="w-3 h-3 mr-1" />
                                    Nome IA: {doc.smartFilename}
                                  </span>
                                </div>
                              )}
                              
                              <div className="text-sm text-gray-500 space-y-1">
                                <p>Tipo: {doc.documentType}</p>
                                <p>Tamanho original: {formatFileSize(doc.originalSizeBytes)}</p>
                                {doc.pdfSizeBytes && (
                                  <p>Tamanho PDF: {formatFileSize(doc.pdfSizeBytes)}</p>
                                )}
                                {doc.pageCount && <p>Páginas: {doc.pageCount}</p>}
                                <p>Enviado em: {new Date(doc.createdAt).toLocaleDateString('pt-BR')}</p>
                              </div>
                              
                              {doc.aiAnalysis && (
                                <div className="mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                                  <div className="flex items-center mb-2">
                                    <Brain className="w-4 h-4 text-blue-600 mr-2" />
                                    <span className="text-sm font-medium text-blue-900">Análise IA:</span>
                                    <span className="ml-2 text-xs px-2 py-1 rounded-full bg-blue-100 text-blue-800">
                                      Confiança: {Math.round((doc.aiAnalysis.confidence || 0) * 100)}%
                                    </span>
                                  </div>
                                  
                                  {doc.aiAnalysis.detectedInfo && (
                                    <div className="text-sm text-blue-700 space-y-1">
                                      {doc.aiAnalysis.detectedInfo.name && (
                                        <p>• Nome detectado: {doc.aiAnalysis.detectedInfo.name}</p>
                                      )}
                                      {doc.aiAnalysis.detectedInfo.cpf && (
                                        <p>• CPF: {doc.aiAnalysis.detectedInfo.cpf}</p>
                                      )}
                                      {doc.aiAnalysis.detectedInfo.rg && (
                                        <p>• RG: {doc.aiAnalysis.detectedInfo.rg}</p>
                                      )}
                                    </div>
                                  )}
                                </div>
                              )}
                              
                              {doc.validation && (
                                <div className="mt-3 p-3 bg-gray-50 rounded-lg">
                                  <div className="flex items-center mb-2">
                                    <FileCheck className="w-4 h-4 text-green-600 mr-2" />
                                    <span className="text-sm font-medium text-gray-700">Validação IA:</span>
                                    <span className={`ml-2 text-xs px-2 py-1 rounded-full ${
                                      doc.validation.isRelevant 
                                        ? 'bg-green-100 text-green-800' 
                                        : 'bg-red-100 text-red-800'
                                    }`}>
                                      {doc.validation.isRelevant ? 'Relevante' : 'Não Relevante'}
                                    </span>
                                    <span className="ml-2 text-xs text-gray-500">
                                      ({Math.round(doc.validation.relevanceScore * 100)}%)
                                    </span>
                                  </div>
                                  <p className="text-sm text-gray-600">{doc.validation.analysis}</p>
                                  {doc.validation.suggestions && (
                                    <div className="mt-2">
                                      <p className="text-xs font-medium text-gray-700">Sugestões:</p>
                                      <p className="text-xs text-gray-600">{doc.validation.suggestions}</p>
                                    </div>
                                  )}
                                </div>
                              )}
                            </div>
                            
                            <div className="flex items-center space-x-2 ml-4">
                              {doc.pdfPath && (
                                <button
                                  onClick={() => window.open(doc.pdfPath, '_blank')}
                                  className="p-2 text-blue-600 hover:text-blue-800 rounded"
                                  title="Visualizar PDF"
                                >
                                  <Eye className="w-4 h-4" />
                                </button>
                              )}
                              
                              <button
                                onClick={() => handleDeleteDocument(doc)}
                                className="p-2 text-red-600 hover:text-red-800 rounded"
                                title="Excluir"
                              >
                                <Trash2 className="w-4 h-4" />
                              </button>
                            </div>
                          </div>
                        </div>
                      )
                    })}
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <Upload className="w-12 h-12 text-gray-300 mx-auto mb-4" />
                    <h3 className="text-lg font-medium text-gray-900 mb-2">Nenhum documento ainda</h3>
                    <p className="text-gray-500 mb-4">
                      Adicione documentos para começar o processamento automático.
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Quick Actions */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Ações Rápidas</h3>
              <div className="space-y-3">
                {((isEditing && editData.narrative) || (!isEditing && project.narrative)) && !project.processedNarrative && (
                  <button
                    onClick={handleProcessNarrative}
                    disabled={isProcessingNarrative}
                    className="w-full flex items-center space-x-3 px-4 py-3 text-left text-gray-700 hover:bg-gray-50 rounded-lg border border-gray-200 transition-colors disabled:opacity-50"
                  >
                    <Bot className="w-5 h-5 text-purple-600" />
                    <span>{isProcessingNarrative ? 'Organizando...' : 'Organizar Texto'}</span>
                  </button>
                )}
                
                {project.documents && project.documents.length > 0 && (
                  <>
                    <button
                      onClick={handleExportSeparatePDFs}
                      disabled={isExportingSeparate}
                      className="w-full flex items-center space-x-3 px-4 py-3 text-left text-gray-700 hover:bg-gray-50 rounded-lg border border-gray-200 transition-colors disabled:opacity-50"
                    >
                      <Download className="w-5 h-5 text-indigo-600" />
                      <span>{isExportingSeparate ? 'Baixando...' : 'Exportar PDFs Separados'}</span>
                    </button>
                    <button 
                      onClick={handleExportZipPDFs}
                      disabled={isExportingSeparate}
                      className="w-full flex items-center space-x-3 px-4 py-3 text-left text-gray-700 hover:bg-gray-50 rounded-lg border border-gray-200 transition-colors disabled:opacity-50"
                    >
                      <Download className="w-5 h-5 text-green-600" />
                      <span>{isExportingSeparate ? 'Gerando ZIP...' : 'Exportar ZIP'}</span>
                    </button>
                  </>
                )}
              </div>
            </div>

            {/* Progress */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Progresso</h3>
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Projeto criado</span>
                  <CheckCircle className="w-5 h-5 text-green-600" />
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Narrativa adicionada</span>
                  {project.narrative ? (
                    <CheckCircle className="w-5 h-5 text-green-600" />
                  ) : (
                    <div className="w-5 h-5 rounded-full border-2 border-gray-300"></div>
                  )}
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Narrativa processada</span>
                  {project.processedNarrative ? (
                    <CheckCircle className="w-5 h-5 text-green-600" />
                  ) : (
                    <div className="w-5 h-5 rounded-full border-2 border-gray-300"></div>
                  )}
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Documentos anexados</span>
                  {project.documents && project.documents.length > 0 ? (
                    <CheckCircle className="w-5 h-5 text-green-600" />
                  ) : (
                   <div className="w-5 h-5 rounded-full border-2 border-gray-300"></div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Upload Modal */}
      {showUploadModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-lg w-full mx-4">
            <div className="flex items-center justify-between p-6 border-b border-gray-200">
              <h3 className="text-lg font-medium text-gray-900 flex items-center">
                <Brain className="w-5 h-5 mr-2 text-blue-600" />
                Adicionar Arquivos
              </h3>
              <button
                onClick={() => setShowUploadModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <X className="w-6 h-6" />
              </button>
            </div>
            
            <div className="p-6 space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  Selecione todos os documentos
                </label>
                
                <div 
                  className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors relative ${
                    selectedFiles && selectedFiles.length > 0 
                      ? 'border-green-300 bg-green-50' 
                      : 'border-gray-300 hover:border-blue-400 hover:bg-blue-50'
                  }`}
                >
                  <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  
                  {selectedFiles && selectedFiles.length > 0 ? (
                    <div>
                      <p className="text-green-600 font-medium mb-2">
                        ✅ {selectedFiles.length} arquivo(s) selecionado(s)
                      </p>
                      <div className="text-sm text-gray-600 space-y-1">
                        {Array.from(selectedFiles).map((file, index) => (
                          <div key={index} className="flex items-center justify-center">
                            <FileText className="w-4 h-4 mr-2" />
                            {file.name}
                          </div>
                        ))}
                      </div>
                    </div>
                  ) : (
                    <div>
                      <p className="text-gray-600 mb-2">
                        Arraste arquivos aqui ou clique para selecionar
                      </p>
                      <p className="text-xs text-gray-500">
                        RG, CNH, CPF, Comprovantes, Procurações, etc.
                      </p>
                    </div>
                  )}
                  
                  <input
                    type="file"
                    multiple
                    accept=".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png,.gif"
                    onChange={(e) => setSelectedFiles(e.target.files)}
                    className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                  />
                </div>
                
                <p className="text-xs text-gray-500 mt-2">
                  Formatos aceitos: PDF, DOC, DOCX, TXT, JPG, PNG, GIF (máx. 30MB cada)
                </p>
              </div>

              {isUploading && Object.keys(uploadProgress).length > 0 && (
                <div className="bg-gray-50 rounded-lg p-4">
                  <h4 className="text-sm font-medium text-gray-700 mb-3">Progresso da Análise IA:</h4>
                  <div className="space-y-2">
                    {Object.entries(uploadProgress).map(([fileKey, progress]) => (
                      <div key={fileKey}>
                        <div className="flex justify-between text-xs text-gray-600 mb-1">
                          <span>Arquivo {fileKey.split('_')[1]}</span>
                          <span>{progress}%</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div 
                            className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                            style={{ width: `${progress}%` }}
                          />
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                <div className="flex items-start">
                  <Brain className="w-5 h-5 text-purple-600 mr-3 mt-0.5" />
                  <div>
                    <h4 className="text-sm font-medium text-purple-900 mb-1">
                      🧠 Análise Inteligência Artificial Real
                    </h4>
                    <p className="text-sm text-purple-700">
                      A IA irá processar cada documento usando OCR e análise avançada:
                    </p>
                    <ul className="text-xs text-purple-600 mt-2 space-y-1">
                      <li>• <strong>Detecção automática</strong> do tipo de documento</li>
                      <li>• <strong>Extração de dados</strong> (nomes, CPF, RG, etc.)</li>
                      <li>• <strong>Nomenclatura inteligente</strong> baseada no conteúdo</li>
                      <li>• <strong>Análise de confiança</strong> da identificação</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>

            <div className="flex justify-end space-x-3 p-6 border-t border-gray-200">
              <button
                onClick={() => {
                  setShowUploadModal(false)
                  setSelectedFiles(null)
                  setUploadProgress({})
                }}
                className="px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Cancelar
              </button>
              
              <button
                onClick={handleUploadDocuments}
                disabled={isUploading || !selectedFiles || selectedFiles.length === 0}
                className="flex items-center space-x-2 px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <span>
                  {isUploading 
                    ? 'IA Analisando...' 
                    : `Analisar Documentos`
                  }
                </span>
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

page 4

//src/app/projects/new/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import { 
  ArrowLeft, 
  Save, 
  Scale, 
  User, 
  Building, 
  FileText, 
  Info,
  CheckCircle,
  AlertCircle
} from 'lucide-react'

const createProjectSchema = z.object({
  name: z.string().min(2, 'Nome do projeto deve ter pelo menos 2 caracteres'),
  client: z.string().min(2, 'Nome do cliente deve ter pelo menos 2 caracteres'),
  system: z.string().min(1, 'Sistema é obrigatório'),
  actionType: z.string().min(1, 'Tipo de ação é obrigatório'),
  narrative: z.string().optional(),
})

type CreateProjectFormData = z.infer<typeof createProjectSchema>

interface SystemConfig {
  systemName: string
  maxFileSize: number
  maxPageSize: number
}

export default function NewProjectPage() {
  const router = useRouter()
  const [isLoading, setIsLoading] = useState(false)
  const [systems, setSystems] = useState<SystemConfig[]>([])
  const [selectedSystem, setSelectedSystem] = useState<SystemConfig | null>(null)
  const [message, setMessage] = useState<{ type: 'error' | 'success', text: string } | null>(null)

  const form = useForm<CreateProjectFormData>({
    resolver: zodResolver(createProjectSchema),
    defaultValues: {
      name: '',
      client: '',
      system: '',
      actionType: '',
      narrative: '',
    }
  })

  useEffect(() => {
    // Verificar autenticação
    const token = localStorage.getItem('token')
    if (!token) {
      router.push('/login')
      return
    }

    loadSystems()
  }, [router])

  const loadSystems = async () => {
    try {
      console.log('🔍 Carregando sistemas...')
      const token = localStorage.getItem('token')
      const response = await fetch('/api/systems', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      console.log('📊 Status da resposta:', response.status)

      if (response.ok) {
        const data = await response.json()
        console.log('✅ Dados recebidos:', data)
        
        if (data.success && data.systems) {
          setSystems(data.systems)
          console.log('📋 Sistemas carregados:', data.systems.length)
        } else {
          console.warn('⚠️ Resposta sem sistemas:', data)
          // Usar dados padrão
          setDefaultSystems()
        }
      } else {
        console.error('❌ Erro HTTP:', response.status)
        const errorData = await response.json().catch(() => ({}))
        console.error('❌ Detalhes do erro:', errorData)
        setDefaultSystems()
      }
    } catch (error) {
      console.error('❌ Erro ao carregar sistemas:', error)
      setDefaultSystems()
    }
  }

  const setDefaultSystems = () => {
    console.log('📋 Usando sistemas padrão')
    setSystems([
      { systemName: 'e-SAJ', maxFileSize: 30 * 1024 * 1024, maxPageSize: 300 },
      { systemName: 'PJe - 1º Grau', maxFileSize: 5 * 1024 * 1024, maxPageSize: 500 },
      { systemName: 'PJe - 2º Grau', maxFileSize: 10 * 1024 * 1024, maxPageSize: 500 },
      { systemName: 'PJe 2x', maxFileSize: 3 * 1024 * 1024, maxPageSize: 300 },
      { systemName: 'PJe - TRT 1º Grau', maxFileSize: 3 * 1024 * 1024, maxPageSize: 500 },
    ])
  }

  const onSubmit = async (data: CreateProjectFormData) => {
    setIsLoading(true)
    setMessage(null)

    try {
      const token = localStorage.getItem('token')
      const response = await fetch('/api/projects', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(data),
      })

      const result = await response.json()

      if (result.success) {
        setMessage({ type: 'success', text: 'Projeto criado com sucesso!' })
        setTimeout(() => {
          router.push(`/projects/${result.project.id}`)
        }, 1500)
      } else {
        setMessage({ type: 'error', text: result.error || 'Erro ao criar projeto' })
      }
    } catch (error) {
      setMessage({ type: 'error', text: 'Erro de conexão' })
    } finally {
      setIsLoading(false)
    }
  }

  const handleSystemChange = (systemName: string) => {
    const system = systems.find(s => s.systemName === systemName)
    setSelectedSystem(system || null)
    form.setValue('system', systemName)
  }

  const formatFileSize = (bytes: number) => {
    return (bytes / (1024 * 1024)).toFixed(0) + ' MB'
  }

  const commonActionTypes = [
    'Ação de Indenização',
    'Ação Trabalhista',
    'Ação de Cobrança',
    'Ação de Despejo',
    'Ação Declaratória',
    'Ação Cautelar',
    'Mandado de Segurança',
    'Habeas Corpus',
    'Ação Penal',
    'Ação Civil Pública',
    'Execução',
    'Embargos',
    'Recurso',
    'Outro'
  ]

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <button
                onClick={() => router.push('/dashboard')}
                className="mr-4 p-2 text-gray-600 hover:text-gray-900 transition-colors"
              >
                <ArrowLeft className="w-5 h-5" />
              </button>
              <Scale className="w-8 h-8 text-blue-600 mr-3" />
              <h1 className="text-xl font-semibold text-gray-900">Novo Projeto</h1>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Breadcrumb */}
        <nav className="flex mb-8" aria-label="Breadcrumb">
          <ol className="inline-flex items-center space-x-1 md:space-x-3">
            <li className="inline-flex items-center">
              <button
                onClick={() => router.push('/dashboard')}
                className="text-gray-700 hover:text-blue-600 inline-flex items-center"
              >
                Dashboard
              </button>
            </li>
            <li>
              <div className="flex items-center">
                <span className="text-gray-400 mx-2">/</span>
                <span className="text-gray-500">Novo Projeto</span>
              </div>
            </li>
          </ol>
        </nav>

        {/* Message */}
        {message && (
          <div className={`p-4 rounded-lg mb-6 flex items-center ${
            message.type === 'error' 
              ? 'bg-red-50 text-red-700 border border-red-200'
              : 'bg-green-50 text-green-700 border border-green-200'
          }`}>
            {message.type === 'error' ? (
              <AlertCircle className="w-5 h-5 mr-2 flex-shrink-0" />
            ) : (
              <CheckCircle className="w-5 h-5 mr-2 flex-shrink-0" />
            )}
            {message.text}
          </div>
        )}

        {/* Form */}
        <div className="bg-white rounded-lg shadow">
          <div className="px-6 py-4 border-b border-gray-200">
            <h2 className="text-lg font-medium text-gray-900">Informações do Projeto</h2>
            <p className="text-sm text-gray-500 mt-1">
              Preencha as informações básicas para criar um novo projeto jurídico.
            </p>
          </div>

          <form onSubmit={form.handleSubmit(onSubmit)} className="p-6 space-y-6">
            {/* Nome do Projeto */}
            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-2">
                Nome do Projeto *
              </label>
              <div className="relative">
                <FileText className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                <input
                  id="name"
                  type="text"
                  {...form.register('name')}
                  className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900"
                  placeholder="Ex: Ação Trabalhista - João Silva"
                />
              </div>
              {form.formState.errors.name && (
                <p className="text-red-500 text-sm mt-1">{form.formState.errors.name.message}</p>
              )}
            </div>

            {/* Nome do Cliente */}
            <div>
              <label htmlFor="client" className="block text-sm font-medium text-gray-700 mb-2">
                Nome do Cliente *
              </label>
              <div className="relative">
                <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                <input
                  id="client"
                  type="text"
                  {...form.register('client')}
                  className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900"
                  placeholder="Nome completo do cliente"
                />
              </div>
              {form.formState.errors.client && (
                <p className="text-red-500 text-sm mt-1">{form.formState.errors.client.message}</p>
              )}
            </div>

            {/* Sistema Judicial */}
            <div>
              <label htmlFor="system" className="block text-sm font-medium text-gray-700 mb-2">
                Sistema Judicial *
              </label>
              <div className="relative">
                <Building className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                <select
                  id="system"
                  {...form.register('system')}
                  onChange={(e) => handleSystemChange(e.target.value)}
                  className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900"
                >
                  <option value="">Selecione o sistema</option>
                  {systems.map((system) => (
                    <option key={system.systemName} value={system.systemName}>
                      {system.systemName}
                    </option>
                  ))}
                </select>
              </div>
              {form.formState.errors.system && (
                <p className="text-red-500 text-sm mt-1">{form.formState.errors.system.message}</p>
              )}
              
              {/* System Requirements */}
              {selectedSystem && (
                <div className="mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                  <div className="flex items-start">
                    <Info className="w-5 h-5 text-blue-600 mr-2 flex-shrink-0 mt-0.5" />
                    <div className="text-sm">
                      <p className="text-blue-800 font-medium mb-1">Requisitos do Sistema:</p>
                      <ul className="text-blue-700 space-y-1">
                        <li>• Tamanho máximo: {formatFileSize(selectedSystem.maxFileSize)}</li>
                        <li>• Máximo por página: {selectedSystem.maxPageSize} KB</li>
                        <li>• Formatos aceitos: PDF, DOC, DOCX, TXT, JPG, PNG</li>
                      </ul>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Tipo de Ação */}
            <div>
              <label htmlFor="actionType" className="block text-sm font-medium text-gray-700 mb-2">
                Tipo de Ação *
              </label>
              <select
                id="actionType"
                {...form.register('actionType')}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900"
              >
                <option value="">Selecione o tipo de ação</option>
                {commonActionTypes.map((action) => (
                  <option key={action} value={action}>
                    {action}
                  </option>
                ))}
              </select>
              {form.formState.errors.actionType && (
                <p className="text-red-500 text-sm mt-1">{form.formState.errors.actionType.message}</p>
              )}
            </div>

            {/* Narrativa */}
            <div>
              <label htmlFor="narrative" className="block text-sm font-medium text-gray-700 mb-2">
                Narrativa dos Fatos (Opcional)
              </label>
              <textarea
                id="narrative"
                {...form.register('narrative')}
                rows={6}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900"
                placeholder="Descreva os fatos relevantes do caso. Esta narrativa será processada pela IA para linguagem jurídica..."
              />
              <p className="text-sm text-gray-500 mt-1">
                A narrativa pode ser adicionada ou editada posteriormente. Ela será processada pela IA para linguagem jurídica.
              </p>
            </div>

            {/* Buttons */}
            <div className="flex justify-end space-x-4 pt-6 border-t border-gray-200">
              <button
                type="button"
                onClick={() => router.push('/dashboard')}
                className="px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Cancelar
              </button>
              <button
                type="submit"
                disabled={isLoading}
                className="flex items-center space-x-2 px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <Save className="w-5 h-5" />
                <span>{isLoading ? 'Criando...' : 'Criar Projeto'}</span>
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  )
}

page 5

//src/app/page.tsx
'use client'

import { useEffect } from 'react'
import { useRouter } from 'next/navigation'

export default function HomePage() {
  const router = useRouter()

  useEffect(() => {
    // Redirecionar automaticamente para login
    router.push('/login')
  }, [router])

  // Mostrar loading enquanto redireciona
  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center">
      <div className="text-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
        <p className="text-gray-600">Redirecionando para login...</p>
      </div>
    </div>
  )
}

layout.tsx 1

//src/app/layout.tsx
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Sistema Jurídico",
  description: "Sistema completo para gestão de processos e documentos jurídicos",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="pt-BR">
      <body 
        className={inter.className}
        suppressHydrationWarning={true}
      >
        {children}
      </body>
    </html>
  );
}

